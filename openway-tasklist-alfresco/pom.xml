<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>it.iopenway</groupId>
		<artifactId>openway-tasklist</artifactId>
		<version>6.2.0.1.0</version>
	</parent>
	<artifactId>openway-tasklist-alfresco</artifactId>
	<packaging>jar</packaging>

	<name>Intesys Openway Tasklist - Alfresco</name>
	<description>Intesys Openway Tasklist - Alfresco</description>

	<properties>
		<!-- Environment configuration properties -->
		<acs.debug.port>8888</acs.debug.port>
		<!-- This parameter is only required for those cases in which ACS is not exposed in http://localhost:8080/alfresco (i.e. Windows Docker) -->
		<test.acs.endpoint.path />

	</properties>

	<!-- Libs used in Unit and Integration tests -->
	<!-- IMPORTANT - Test dependencies need to be here in the top parent POM as the Alfresco Maven IT Mojo runs as part of the parent project ... -->
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.9.5</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- The main Alfresco Repo dependency for compiling Java code in src/main/java -->
		<dependency>
			<groupId>${alfresco.groupId}</groupId>
			<artifactId>alfresco-remote-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Bring in Alfresco RAD so we get access to AlfrescoTestRunner classes -->
		<dependency>
			<groupId>org.alfresco.maven</groupId>
			<artifactId>alfresco-rad</artifactId>
			<version>${alfresco.sdk.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<!-- This will import the dependencyManagement for all artifacts in the selected Alfresco platform. NOTE: You still need to define dependencies in your POM, but 
				you can omit version as it's enforced by this dependencyManagement. NOTE: It defaults to the latest version this SDK pom has been tested with, but alfresco version 
				can/should be overridden in your project's pom -->
			<dependency>
				<groupId>${alfresco.groupId}</groupId>
				<artifactId>${alfresco.bomDependencyArtifactId}</artifactId>
				<version>${alfresco.platform.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<!-- Build an AMP if 3rd party libs are needed by the extensions JARs are the default artifact produced in your modules, if you want to build an amp for each 
				module you have to enable this plugin and inspect the src/main/assembly.xml file if you want to customize the layout of your AMP. The end result is that Maven will 
				produce both a JAR file and an AMP with your module. -->
			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-assembly-plugin</artifactId> <version>2.6</version> <executions> <execution> <id>build-amp-file</id> 
				<phase>package</phase> <goals> <goal>single</goal> </goals> <configuration> <appendAssemblyId>false</appendAssemblyId> <descriptor>src/main/assembly/amp.xml</descriptor> 
				</configuration> </execution> </executions> <dependencies> <dependency> <groupId>org.alfresco.maven.plugin</groupId> <artifactId>alfresco-maven-plugin</artifactId> 
				<version>${alfresco.sdk.version}</version> </dependency> </dependencies> </plugin> -->

			<!-- Filter the test resource files in the AIO parent project, and do property substitutions. We need this config so this is done before the Alfresco Maven Plugin 
				'run' is executed. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-and-filter-docker-compose-resources</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.outputDirectory}/docker</outputDirectory>
							<resources>
								<resource>
									<directory>docker</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-and-filter-docker-resources</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/docker</directory>
									<filtering>true</filtering>
									<excludes>
										<exclude>**/*.jar</exclude>
										<exclude>**/*.so</exclude>
										<exclude>**/*.gz</exclude>
									</excludes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-and-filter-docker-resources-non-filtered</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/docker</directory>
									<filtering>false</filtering>
									<includes>
										<include>**/*.jar</include>
										<include>**/*.so</include>
										<include>**/*.gz</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-repository-extension</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/extensions</outputDirectory>
							<resources>
								<resource>
									<directory>target</directory>
									<includes>
										<include>${project.build.finalName}.jar</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-repository-tests</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/extensions</outputDirectory>
							<resources>
								<resource>
									<directory>target</directory>
									<includes>
										<include>${project.build.finalName}-tests.jar</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.1.1</version>
				<executions>
					<!-- Copy the dependencies required for execute integration tests -->
					<execution>
						<id>collect-test-artifacts</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/extensions</outputDirectory>
							<excludeScope>compile</excludeScope>
						</configuration>
					</execution>
					<!-- Collect extensions (JARs or AMPs) declared in this module to be deployed to docker -->
					<execution>
						<id>collect-extensions</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/extensions</outputDirectory>
							<includeScope>runtime</includeScope>
							<!-- IMPORTANT: if using amp dependencies only, add <includeTypes>amp</includeTypes> -->
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Make sure we attach the tests so we can include them when running -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<goals>
							<goal>test-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Runs the integration tests, any class that follows naming convention "**/IT*.java", "**/*IT.java", and "**/*ITCase.java" will be considered an integration 
				test -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>3.0.0-M1</version>
				<configuration>
					<systemPropertyVariables>
						<acs.endpoint.path>${test.acs.endpoint.path}</acs.endpoint.path>
					</systemPropertyVariables>
				</configuration>
				<executions>
					<execution>
						<id>integration-test</id>
						<phase>integration-test</phase>
						<goals>
							<goal>integration-test</goal>
						</goals>
					</execution>
					<execution>
						<id>verify-test</id>
						<phase>verify</phase>
						<goals>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.surefire</groupId>
						<artifactId>surefire-junit47</artifactId>
						<version>3.0.0-M1</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>
</project>
