<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>it.iopenway</groupId>
		<artifactId>openway-tasklist</artifactId>
		<version>6.2.0.1.0-SNAPSHOT</version>
	</parent>
	<artifactId>openway-tasklist-share</artifactId>
	<packaging>jar</packaging>

	<name>Intesys Openway Tasklist - Share</name>
	<description>Intesys Openway Tasklist - Share</description>

	<properties>
		<!-- Environment configuration properties -->
		<share.debug.port>9898</share.debug.port>

	</properties>

	<!-- Libs used in Unit and Integration tests -->
	<!-- IMPORTANT - Test dependencies need to be here in the top parent POM as the Alfresco Maven IT Mojo runs as part of the parent project ... -->
	<dependencies>
		<dependency>
			<groupId>${alfresco.groupId}</groupId>
			<artifactId>share</artifactId>
			<version>${alfresco.share.version}</version>
			<classifier>classes</classifier>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Build an AMP if 3rd party libs are needed by the extensions JARs are the default artifact produced in your modules, if you want to build an amp for each 
				module you have to enable this plugin and inspect the src/main/assembly.xml file if you want to customize the layout of your AMP. The end result is that Maven will 
				produce both a JAR file and an AMP with your module. -->
			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-assembly-plugin</artifactId> <version>2.6</version> <executions> <execution> <id>build-amp-file</id> 
				<phase>package</phase> <goals> <goal>single</goal> </goals> <configuration> <appendAssemblyId>false</appendAssemblyId> <descriptor>src/main/assembly/amp.xml</descriptor> 
				</configuration> </execution> </executions> <dependencies> <dependency> <groupId>org.alfresco.maven.plugin</groupId> <artifactId>alfresco-maven-plugin</artifactId> 
				<version>${alfresco.sdk.version}</version> </dependency> </dependencies> </plugin> -->

			<!-- Filter the test resource files in the AIO parent project, and do property substitutions. We need this config so this is done before the Alfresco Maven Plugin 
				'run' is executed. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-and-filter-docker-compose-resources</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.outputDirectory}/docker</outputDirectory>
							<resources>
								<resource>
									<directory>docker</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-and-filter-docker-resources</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/docker</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-share-extension</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/extensions</outputDirectory>
							<resources>
								<resource>
									<directory>target</directory>
									<includes>
										<include>${project.build.finalName}.jar</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.1.1</version>
				<executions>
					<!-- Collect extensions (JARs or AMPs) declared in this module to be deployed to docker -->
					<execution>
						<id>collect-extensions</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/extensions</outputDirectory>
							<includeScope>runtime</includeScope>
							<!-- IMPORTANT: if using amp dependencies only, add <includeTypes>amp</includeTypes> -->
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
